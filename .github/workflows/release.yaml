name: release
permissions:
  contents: write
on:
  push:
    tags:
      - "*"
  workflow_dispatch:
env:
  PACKAGE_NAME: example-device-app
jobs:
  release:
    name: Package and release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: false
      - name: Install dependencies
        run: go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
      - name: Set version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Package
        run: ./ci/build.sh
        env:
          SEMVER: ${{ env.RELEASE_VERSION }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/*

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          draft: true
          files: |
            ./dist/*

      - name: Publish
        if: startsWith(github.ref, 'refs/tags/') && env.PUBLISH_TOKEN
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          PUBLISH_REPO: ${{ secrets.PUBLISH_REPO }}
          PUBLISH_OWNER: ${{ secrets.PUBLISH_OWNER }}
        run: |
          ./ci/publish.sh ./dist --repo "$PUBLISH_REPO" --owner "$PUBLISH_OWNER"

      - uses: reubenmiller/setup-go-c8y-cli@main
        with:
          showVersion: true
          showTenant: false
      - name: publish
        env:
          C8Y_HOST: '${{ secrets.C8Y_HOST }}'
          C8Y_USER: '${{ secrets.C8Y_USER }}'
          C8Y_PASSWORD: '${{ secrets.C8Y_PASSWORD }}'
        run: |
          c8y software get --id "$PACKAGE_NAME" -n --silentStatusCodes ||
            c8y software create -n --softwareType apt --name "$PACKAGE_NAME"

          c8y software versions create -n \
            --software "$PACKAGE_NAME" \
            --version "${{ env.RELEASE_VERSION }}" \
            --url " "
